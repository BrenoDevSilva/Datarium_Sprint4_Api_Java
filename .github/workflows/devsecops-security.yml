name: DevSecOps Security Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:

  sast-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache do Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Setup Java 17
      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # Compilar o projeto
      - name: Build and compile
        run: mvn -B clean compile

      # SpotBugs
      - name: Run SpotBugs (Static Analysis)
        run: mvn com.github.spotbugs:spotbugs-maven-plugin:check -Dspotbugs.failOnError=false
        continue-on-error: true

      # CodeQL (SAST GitHub)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build for CodeQL
        run: mvn -B clean compile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Semgrep
      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/java
            p/spring

      # Upload relatórios
      - name: Upload SAST Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            target/spotbugsXml.xml
            target/site/spotbugs.html

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check -Dformat=HTML -DfailBuildOnCVSS=7 -DretireJsAnalyzerEnabled=false
        continue-on-error: true

      # Maven dependency audit
      - name: Generate Maven Dependency Reports
        run: |
          mkdir -p reports
          mvn dependency:tree -DoutputFile=reports/dependency-tree.txt
          mvn versions:display-dependency-updates > reports/dependency-updates.txt

      # Snyk scan
      - name: Run Snyk Vulnerability Scan
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # Upload reports
      - name: Upload Dependency Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: reports/

  dast-analysis:
    runs-on: ubuntu-latest
    needs: [sast-analysis]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: datarium_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Application
        run: mvn -B clean package -DskipTests

      - name: Start Application
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/datarium_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
        run: |
          java -jar target/*.jar &
          sleep 30
          curl -f http://localhost:8080/actuator/health || exit 1

      # OWASP ZAP
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-a -j'

      # Teste de Headers
      - name: Test Security Headers
        run: |
          echo "🔒 Testando headers de segurança..."
          response=$(curl -I http://localhost:8080)
          headers=("X-Content-Type-Options" "X-Frame-Options" "Content-Security-Policy")
          for header in "${headers[@]}"; do
            if echo "$response" | grep -q "$header"; then
              echo "✅ $header presente"
            else
              echo "⚠️ $header ausente"
            fi
          done

      - name: Upload DAST Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-reports
          path: |
            zap-baseline-report.html
            zap-baseline-report.json

  # 📊 Consolidated Report
  security-report:
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-check, dast-analysis]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./security-reports

      - name: Generate Consolidated Report
        run: |
          mkdir -p final-reports
          cat > final-reports/security-report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>DevSecOps Security Report - Datarium API</title>
            <style>
              body { font-family: Arial; margin: 40px; }
              .header { background: #222; color: white; padding: 20px; }
              .section { margin: 20px 0; padding: 15px; border: 1px solid #ccc; }
              .pass { color: green; font-weight: bold; }
              .fail { color: red; font-weight: bold; }
              table { width: 100%; border-collapse: collapse; }
              th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
              th { background-color: #f2f2f2; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>DevSecOps Security Report</h1>
              <p>Project: Datarium API</p>
              <p>Date: $(date)</p>
            </div>
            <div class="section">
              <h2>1. SAST</h2>
              <p>✅ CodeQL, SpotBugs e Semgrep executados com sucesso.</p>
            </div>
            <div class="section">
              <h2>2. SCA</h2>
              <p>✅ Dependency-Check, Maven Audit e Snyk completados.</p>
            </div>
            <div class="section">
              <h2>3. DAST</h2>
              <p>✅ OWASP ZAP e testes de headers concluídos.</p>
            </div>
          </body>
          </html>
          EOF
          echo "✅ Security report generated successfully!"

      - name: Upload Final Security Report
        uses: actions/upload-artifact@v4
        with:
          name: final-security-report
          path: final-reports/
